# compute the cov matrix for v = 5/2
c_2 <- cov.mat(dist_mat_new, c(1,3,smoothness = 5/2))
# e)
Z_s_new_1 <- t(c_1) %*% solve(C_1) %*% transect$Z.s
Z_s_new_2 <- t(c_2) %*% solve(C_2) %*% transect$Z.s
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-10,10))
lines(s.new, Z_s_new_1, col = 2)
lines(s.new, Z_s_new_2, col = 3)
legend(legend = c("v = 1/2", "v = 5/4"), col = c(2,3), lwd = 1)
# d)
s.new <- seq(0, 10, 0.001)
dist_mat_new <- rdist(transect$s, s.new)
# calculate the cov matrix for v = 1/2
c_1 <- mat_1(dist_mat_new, 3,1)
# compute the cov matrix for v = 5/2
c_2 <- cov.mat(dist_mat_new, c(1,3,smoothness = 5/2))
# e)
Z_s_new_1 <- t(c_1) %*% solve(C_1) %*% transect$Z.s
Z_s_new_2 <- t(c_2) %*% solve(C_2) %*% transect$Z.s
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-10,10))
lines(s.new, Z_s_new_1, col = 2)
lines(s.new, Z_s_new_2, col = 3)
legend("topleft",legend = c("v = 1/2", "v = 5/4"), col = c(2,3), lwd = 1)
# d)
s.new <- seq(0, 10, 0.001)
dist_mat_new <- rdist(transect$s, s.new)
# calculate the cov matrix for v = 1/2
c_1 <- mat_1(dist_mat_new, 3,1)
# compute the cov matrix for v = 5/2
c_2 <- cov.mat(dist_mat_new, c(1,3,smoothness = 5/2))
# e)
Z_s_new_1 <- t(c_1) %*% solve(C_1) %*% transect$Z.s
Z_s_new_2 <- t(c_2) %*% solve(C_2) %*% transect$Z.s
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-10,10))
lines(s.new, Z_s_new_1, col = 2)
lines(s.new, Z_s_new_2, col = 3)
legend("topright",legend = c("v = 1/2", "v = 5/4"), col = c(2,3), lwd = 1)
# f)
# the the same for diffferent nuggets
nu <- seq(0,0.9, length = 4)
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-5,5), main = "v = 5/2, different nuggets")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(1,3,smoothness = 5/2,nu[i]))
c_3 <- cov.mat(dist_mat_new, c(1,3,smoothness = 5/2, nu[i]))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", nu, col = 2:5, lwd = 1)
# f)
# the the same for diffferent nuggets
nu <- seq(0,0.9, length = 4)
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-5,5), main = "v = 5/2, different nuggets")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(1,3,smoothness = 5/2,nu[i]))
c_3 <- cov.mat(dist_mat_new, c(1,3,smoothness = 5/2, nu[i]))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
# f)
# the the same for diffferent nuggets
nu <- seq(0,0.9, length = 5)
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-10,10), main = "v = 5/2, different nuggets")
for (i in 1:5){
C_3 <- cov.mat(dist_mat, c(1,3,smoothness = 5/2,nu[i]))
c_3 <- cov.mat(dist_mat_new, c(1,3,smoothness = 5/2, nu[i]))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:6, lwd = 1)
# f)
# the the same for v = 1/2 different nuggets
nu <- seq(0,0.9, length = 4)
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-10,10), main = "v = 1/2, different nuggets")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(1,3,smoothness = 1/2,nu[i]))
c_3 <- cov.mat(dist_mat_new, c(1,3,smoothness = 1/2, nu[i]))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
# the the same for v = 5/4 diffferent nuggets
nu <- seq(0,0.9, length = 4)
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-10,10), main = "v = 5/2, different nuggets")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(1,3,smoothness = 5/2,nu[i]))
c_3 <- cov.mat(dist_mat_new, c(1,3,smoothness = 5/2, nu[i]))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
?cov.mat
# f)
# the the same for v = 1/2 different nuggets
nu <- seq(0,0.9, length = 4)
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-10,10), main = "v = 1/2, different nuggets")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(1,3,smoothness = 1/2,nu[i]))
c_3 <- cov.mat(dist_mat_new, c(1,3,smoothness = 1/2, nu[i]))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
# the the same for v = 5/4 diffferent nuggets
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-10,10), main = "v = 5/2, different nuggets")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(1,3,smoothness = 5/2,nu[i]))
c_3 <- cov.mat(dist_mat_new, c(1,3,smoothness = 5/2, nu[i]))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
# the the same for v = 1/2 different ranges
range <- seq(0.2, 5, length = 4)
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-10,10), main = "v = 1/2, different ranges")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(range[i],3,smoothness = 1/2))
c_3 <- cov.mat(dist_mat_new, c(range[i],3,smoothness = 1/2))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
# f)
# the the same for v = 1/2 different nuggets
nu <- seq(0,0.9, length = 4)
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-5,5), main = "v = 1/2, different nuggets")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(1,3,smoothness = 1/2,nu[i]))
c_3 <- cov.mat(dist_mat_new, c(1,3,smoothness = 1/2, nu[i]))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
# the the same for v = 5/4 diffferent nuggets
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-10,10), main = "v = 5/2, different nuggets")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(1,3,smoothness = 5/2,nu[i]))
c_3 <- cov.mat(dist_mat_new, c(1,3,smoothness = 5/2, nu[i]))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
# the the same for v = 1/2 different ranges
range <- seq(0.2, 3, length = 4)
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-5,5), main = "v = 1/2, different ranges")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(range[i],3,smoothness = 1/2))
c_3 <- cov.mat(dist_mat_new, c(range[i],3,smoothness = 1/2))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
# f)
# the the same for v = 1/2 for different nuggets
nu <- seq(0,0.9, length = 4)
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-5,5), main = "v = 1/2, different nuggets")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(1,3,smoothness = 1/2,nu[i]))
c_3 <- cov.mat(dist_mat_new, c(1,3,smoothness = 1/2, nu[i]))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
# the the same for v = 5/4 for diffferent nuggets
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-10,10), main = "v = 5/2, different nuggets")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(1,3,smoothness = 5/2,nu[i]))
c_3 <- cov.mat(dist_mat_new, c(1,3,smoothness = 5/2, nu[i]))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
# the the same for v = 1/2 for different ranges
range <- seq(0.2, 3, length = 4)
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-5,5), main = "v = 1/2, different ranges")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(range[i],3,smoothness = 1/2))
c_3 <- cov.mat(dist_mat_new, c(range[i],3,smoothness = 1/2))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
# the the same for v = 5/2 for different ranges
range <- seq(0.2, 3, length = 4)
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-5,5), main = "v = 1/2, different ranges")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(range[i],3,smoothness = 5/2))
c_3 <- cov.mat(dist_mat_new, c(range[i],3,smoothness = 5/2))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
# f)
# the the same for v = 1/2 for different nuggets
nu <- seq(0,0.9, length = 4)
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-5,5), main = "v = 1/2, different nuggets")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(1,3,smoothness = 1/2,nu[i]))
c_3 <- cov.mat(dist_mat_new, c(1,3,smoothness = 1/2, nu[i]))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
# the the same for v = 5/4 for diffferent nuggets
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-10,10), main = "v = 5/2, different nuggets")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(1,3,smoothness = 5/2,nu[i]))
c_3 <- cov.mat(dist_mat_new, c(1,3,smoothness = 5/2, nu[i]))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
# the the same for v = 1/2 for different ranges
range <- seq(0.2, 3, length = 4)
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-5,5), main = "v = 1/2, different ranges")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(range[i],3,smoothness = 1/2))
c_3 <- cov.mat(dist_mat_new, c(range[i],3,smoothness = 1/2))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
# the the same for v = 5/2 for different ranges
range <- seq(0.2, 3, length = 4)
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-10,10), main = "v = 1/2, different ranges")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(range[i],3,smoothness = 5/2))
c_3 <- cov.mat(dist_mat_new, c(range[i],3,smoothness = 5/2))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
# f)
# the the same for v = 1/2 for different nuggets
nu <- seq(0,0.9, length = 4)
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-5,5), main = "v = 1/2, different nuggets")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(1,3,smoothness = 1/2,nu[i]))
c_3 <- cov.mat(dist_mat_new, c(1,3,smoothness = 1/2, nu[i]))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
# the the same for v = 5/4 for diffferent nuggets
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-10,10), main = "v = 5/2, different nuggets")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(1,3,smoothness = 5/2,nu[i]))
c_3 <- cov.mat(dist_mat_new, c(1,3,smoothness = 5/2, nu[i]))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = nu, col = 2:5, lwd = 1)
# the the same for v = 1/2 for different ranges
range <- seq(0.2, 3, length = 4)
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-5,5), main = "v = 1/2, different ranges")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(range[i],3,smoothness = 1/2))
c_3 <- cov.mat(dist_mat_new, c(range[i],3,smoothness = 1/2))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = range, col = 2:5, lwd = 1)
# the the same for v = 5/2 for different ranges
range <- seq(0.2, 3, length = 4)
plot(transect$s,transect$Z.s, xlim = c(0,10), ylim = c(-10,10), main = "v = 1/2, different ranges")
for (i in 1:4){
C_3 <- cov.mat(dist_mat, c(range[i],3,smoothness = 5/2))
c_3 <- cov.mat(dist_mat_new, c(range[i],3,smoothness = 5/2))
Z_s_new_3 <- t(c_3) %*% solve(C_3) %*% transect$Z.s
lines(s.new, Z_s_new_3, col = i+1)
}
legend("topright", legend = range, col = 2:5, lwd = 1)
knitr::opts_chunk$set(echo = TRUE)
fram <- read.table("fram.txt", header = TRUE)
fram <- read.table("fram.txt", header = TRUE)
View(fram)
fram <- read.table("fram.txt")
names(fram) <- c("obs","age","sbp21","sbp22", "sbp31", "sbp32", "smoke", "cholest2", "cholest3", "firstchd")
fram <- read.table("fram.txt")
names(fram) <- c("obs","age","sbp21","sbp22", "sbp31", "sbp32", "smoke", "cholest2", "cholest3", "firstchd")
fram <- read.table("fram.txt")
names(fram) <- c("obs","age","sbp21","sbp22", "sbp31", "sbp32", "smoke", "cholest2", "cholest3", "firstchd")
# calculate w for exam 3
fram$w <- log((fram$sbp31+fram$sbp32)/2-50)
View(fram)
summary(fram)
fram <- read.table("fram.txt")
names(fram) <- c("obs","age","sbp21","sbp22", "sbp31", "sbp32", "smoke", "cholest2", "cholest3", "firstchd")
w <- function(x){log(x-50)}
fram$w31 <- w(fram$sbp31)
fram$w32 <- w(fram$sbp32)
# a)
# calculate w for exam 3
fram$w <- (fram$w31+fram$w32)/2
fram <- read.table("fram.txt")
names(fram) <- c("obs","age","sbp21","sbp22", "sbp31", "sbp32", "smoke", "cholest2", "cholest3", "firstchd")
w <- function(x){log(x-50)}
fram$w31 <- w(fram$sbp31)
fram$w32 <- w(fram$sbp32)
# a)
# calculate w for exam 3
fram$w <- (fram$w31+fram$w32)/2
error <- fram$w-fram$w31
mse <- mean(error^2)
fram <- read.table("fram.txt")
names(fram) <- c("obs","age","sbp21","sbp22", "sbp31", "sbp32", "smoke", "cholest2", "cholest3", "firstchd")
w <- function(x){log(x-50)}
fram$w31 <- w(fram$sbp31)
fram$w32 <- w(fram$sbp32)
# a)
# calculate w for exam 3
fram$w <- (fram$w31+fram$w32)/2
error <- fram$w-fram$w31
mse <- mean(error^2)
print(mse)
fram <- read.table("fram.txt")
names(fram) <- c("obs","age","sbp21","sbp22", "sbp31", "sbp32", "smoke", "cholest2", "cholest3", "firstchd")
w <- function(x){log(x-50)}
fram$w31 <- w(fram$sbp31)
fram$w32 <- w(fram$sbp32)
# a)
# calculate w for exam 3
fram$w <- (fram$w31+fram$w32)/2
error <- fram$w-fram$w31
mse <- mean(error^2)
print(mse)
# b)
model_1 <- glm(firstchdd~w+age+smoking,family = binomial(link = "logit"), data = sim2)
fram <- read.table("fram.txt")
names(fram) <- c("obs","age","sbp21","sbp22", "sbp31", "sbp32", "smoke", "cholest2", "cholest3", "firstchd")
w <- function(x){log(x-50)}
fram$w31 <- w(fram$sbp31)
fram$w32 <- w(fram$sbp32)
# a)
# calculate w for exam 3
fram$w <- (fram$w31+fram$w32)/2
error <- fram$w-fram$w31
mse <- mean(error^2)
print(mse)
# b)
model_1 <- glm(firstchdd~w+age+smoking,family = binomial(link = "logit"), data = fram)
fram <- read.table("fram.txt")
names(fram) <- c("obs","age","sbp21","sbp22", "sbp31", "sbp32", "smoke", "cholest2", "cholest3", "firstchd")
w <- function(x){log(x-50)}
fram$w31 <- w(fram$sbp31)
fram$w32 <- w(fram$sbp32)
# a)
# calculate w for exam 3
fram$w <- (fram$w31+fram$w32)/2
error <- fram$w-fram$w31
mse <- mean(error^2)
print(mse)
# b)
model_1 <- glm(firstchd~w+age+smoking,family = binomial(link = "logit"), data = fram)
fram <- read.table("fram.txt")
names(fram) <- c("obs","age","sbp21","sbp22", "sbp31", "sbp32", "smoke", "cholest2", "cholest3", "firstchd")
w <- function(x){log(x-50)}
fram$w31 <- w(fram$sbp31)
fram$w32 <- w(fram$sbp32)
# a)
# calculate w for exam 3
fram$w <- (fram$w31+fram$w32)/2
error <- fram$w-fram$w31
mse <- mean(error^2)
print(mse)
# b)
model_1 <- glm(firstchd~w+age+smoke,family = binomial(link = "logit"), data = fram)
summary(model_1)
fram <- read.table("fram.txt")
names(fram) <- c("obs","age","sbp21","sbp22", "sbp31", "sbp32", "smoke", "cholest2", "cholest3", "firstchd")
w <- function(x){log(x-50)}
fram$w31 <- w(fram$sbp31)
fram$w32 <- w(fram$sbp32)
# a)
# calculate w for exam 3
fram$w <- (fram$w31+fram$w32)/2
error <- fram$w-fram$w31
mse <- mean(error^2)
print(mse)
# b)
model_1 <- glm(firstchd~w+age+smoke,family = binomial(link = "logit"), data = fram)
summary(model_1)
exp(coef(model_1))
?simex
# c)
require(simex)
set.seed(123)
install.packages("simex")
# c)
require(simex)
set.seed(123)
?`simex-package`
?simex
# c)
require(simex)
set.seed(123)
model_1 <- glm(firstchd~w+age+smoke,family = binomial(link = "logit"), data = fram)
simex.model <- simex(model = model_1, SIMEXvariable = "w", measurement.error = sqrt(mse))
# c)
require(simex)
set.seed(123)
model_1 <- glm(firstchd~w+age+smoke,family = binomial(link = "logit"), data = fram)
simex.model <- simex(model = model_1, SIMEXvariable = "w", measurement.error = sqrt(mse), x = TRUE)
?glm
# c)
require(simex)
set.seed(123)
model_1 <- glm(firstchd~w+age+smoke,family = binomial(link = "logit"), data = fram, x = TRUE)
simex.model <- simex(model = model_1, SIMEXvariable = "w", measurement.error = sqrt(mse))
# c)
require(simex)
set.seed(123)
model_1 <- glm(firstchd~w+age+smoke,family = binomial(link = "logit"), data = fram, x = TRUE)
simex.model <- simex(model = model_1, SIMEXvariable = "w", measurement.error = sqrt(mse))
simex.model
plot(fram$firstchd, fram$age)
plot(fram$firstchd, fram$age)
plot(fram$age, fram$firstchd)
boxplot(fram$firstchd~fram$age)
boxplot(fram$firstchd~fram$age)
boxplot(fram$age~fram$firstchd)
boxplot(fram$smoke~fram$firstchd)
boxplot(fram$w~fram$firstchd)
# c)
require(simex)
set.seed(123)
model_1 <- glm(firstchd~w+age+smoke,family = binomial(link = "logit"), data = fram, x = TRUE)
simex.model <- simex(model = model_1, SIMEXvariable = "w", measurement.error = sqrt(mse))
simex.model
plot(simex.model, mfrow = c(2, 2))
plot(simex.model)
# c)
require(simex)
set.seed(123)
model_1 <- glm(firstchd~w+age+smoke,family = binomial(link = "logit"), data = fram, x = TRUE)
simex.model <- simex(model = model_1, SIMEXvariable = "w", measurement.error = sqrt(mse))
simex.model
par( mfrow = c(2, 2))
plot(simex.model)
exp(1.73)
# load the data
data_B_all <- read.csv('Data/dataframe_B_f_and_a.csv', header = TRUE)
setwd("~/Documents/GitHub/Spotify")
# load the data
data_B_all <- read.csv('Data/dataframe_B_f_and_a.csv', header = TRUE)
data_B_all <- na.omit(data_B_all)
data_B_all[,104:127] <- as.data.frame(scale(data_B_all[,104:127]))
# Randomly shuffle the data
data_B_all <-data_B_all[sample(nrow(data_B_all)),-c(1,2,5,7,17,21,22,23)]
#random forest
fit <- randomForest(as.matrix(data_B_all[,-14]), as.matrix(trainData[ , 14]), importance = TRUE)
library(randomForest)
#random forest
fit <- randomForest(as.matrix(data_B_all[,-14]), as.matrix(trainData[ , 14]), importance = TRUE)
#random forest
fit <- randomForest(as.matrix(data_B_all[,-"popularity"]), as.matrix(data_B_all[ , "popularity"]), importance = TRUE)
#random forest
fit <- randomForest(as.matrix(data_B_all[,14]), as.matrix(data_B_all[ , 14]), importance = TRUE)
varImpPlot(iris.rf)
varImpPlot(fit)
#random forest
fit <- randomForest(as.matrix(data_B_all[,-14]), as.matrix(data_B_all[ , 14]), importance = TRUE)
varImpPlot(fit)
tiff('Plots/B_dependance_rf.tiff', width = 8, height = 6, units = 'in', res = 200)
varImpPlot(data_B.rf)
varImpPlot(fit)
dev.off()
partialPlot(fit, data_B_all, x.var = rd_year)
tiff('Plots/B_parital_rf.tiff', width = 8, height = 6, units = 'in', res = 200)
partialPlot(fit, data_B_all, x.var = rd_year)
dev.off()
tiff('Plots/B_parital_rf_inst.tiff', width = 8, height = 6, units = 'in', res = 200)
partialPlot(fit, data_B_all, x.var = instrumentalness)
dev.off()
# create histogram
data_B <- read.csv('Data/dataframe_B_features.csv', header = TRUE)
View(data_B)
View(data_B)
# linear regression on recommended songs
l_reg <- lm(popularity~valence+loudness+acousticness+instrumentalness+speechiness+
danceability+energy+liveness+mode+tempo+duration+rd_year, data = data_B)
summary(l_reg)
##### class tree #######
library(rpart)
library(party)
library(partykit)
reg.tree = rpart(popularity ~ rd_year+instrumentalness+timbre_mean_6 + duration, data=B_data_all)
#load the data
data_B <- read.csv('Data/dataframe_B_features.csv', header = TRUE)
set.seed(145)
# load the data
data_B_all <- read.csv('Data/dataframe_B_f_and_a.csv', header = TRUE)
data_B_all <- na.omit(data_B_all)
data_B_all[,104:127] <- as.data.frame(scale(data_B_all[,104:127]))
library(rpart)
library(partykit)
reg.tree = rpart(popularity ~ rd_year+instrumentalness+timbre_mean_6 + duration, data=B_data_all)
reg.tree = rpart(popularity ~ rd_year+instrumentalness+timbre_mean_6 + duration, data=data_B_all)
plot(as.party(reg.tree))
dev.off()
tiff('Plots/B_reg_tree.tiff', width = 8, height = 6, units = 'in', res = 200)
plot(as.party(reg.tree))
dev.off()
# create histogram
data_B <- read.csv('Data/dataframe_B_features.csv', header = TRUE)
# linear regression on recommended songs
l_reg <- lm(popularity~valence+loudness+acousticness+instrumentalness+speechiness+
danceability+energy+liveness+mode+tempo+duration+key, data = data_B)
summary(l_reg)
coef(l_reg)
options(scipen = 999)
coef(l_reg)
